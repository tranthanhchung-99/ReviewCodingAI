import os
import tempfile
import zipfile
import subprocess
from pathlib import Path
import streamlit as st
from openai import AzureOpenAI
from dotenv import load_dotenv
from PIL import Image
import pytesseract
import json

# =========================
# CONFIG
# =========================
load_dotenv()
client = AzureOpenAI(
    api_version="2024-07-01-preview",
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
)
MODEL = "gpt-4o-mini"

st.set_page_config(page_title="üí¨ AI Code Reviewer", layout="wide")

# =========================
# SESSION STATE 
# =========================
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "review_results" not in st.session_state:
    st.session_state.review_results = []
if "test_cases" not in st.session_state:
    st.session_state.test_cases = []

# =========================
# STYLE
# =========================
st.markdown("""
<style>
body {
    background: linear-gradient(135deg, #e6f2ff, #f7faff);
}
.main {
    padding: 0 !important;
}
header, footer {visibility: hidden;}
/* Header */
.topbar {
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
    box-shadow: 0 3px 15px rgba(0,0,0,0.05);
    padding: 18px 0;
    border-radius: 0 0 25px 25px;
    margin-bottom: 20px;
}
.topbar img {
    width: 45px;
    margin-right: 10px;
}
.topbar h1 {
    font-size: 26px;
    color: #0b2545;
    font-weight: 700;
}

/* Chat container */
.chat-box {
    background: rgba(255,255,255,0.9);
    border-radius: 20px;
    padding: 20px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    height: 65vh;
    overflow-y: auto;
    margin: auto;
    width: 80%;
}

/* Chat input */
.stChatInputContainer {
    width: 80% !important;
    margin: 10px auto 40px auto !important;
}
.stChatInput {
    border-radius: 25px !important;
    box-shadow: 0 3px 8px rgba(0,0,0,0.1) !important;
}
.stChatInput:focus-within {
    outline: none !important;
    border: none !important;
    box-shadow: 0 3px 10px rgba(80,150,255,0.3) !important;
}

/* Buttons */
.sidebar-buttons button {
    border-radius: 30px;
    width: 100%;
    font-weight: 600;
    margin-bottom: 10px;
    transition: 0.2s;
}
.sidebar-buttons button:hover {
    transform: scale(1.03);
}

/* Scrollbar */
.chat-box::-webkit-scrollbar {
    width: 8px;
}
.chat-box::-webkit-scrollbar-thumb {
    background-color: #a3c7ff;
    border-radius: 8px;
}
</style>
""", unsafe_allow_html=True)

# =========================
# HEADER
# =========================
st.markdown("""
<div class="topbar">
    <img src="https://cdn-icons-png.flaticon.com/512/4712/4712038.png">
    <h1>AI Code Reviewer</h1>
</div>
""", unsafe_allow_html=True)

# =========================
# SIDEBAR
# =========================
st.sidebar.markdown("## ‚öôÔ∏è Settings")
with st.sidebar:
    upload = st.file_uploader("üìÇ Upload file / ZIP / Image", type=["zip", "py", "js", "java", "ts", "png", "jpg"])
    reviewer_type = st.selectbox("Reviewer Mode", [
        "Mentor (Gi·∫£i th√≠ch d·ªÖ hi·ªÉu)",
        "Senior Dev (Ph√¢n t√≠ch chuy√™n s√¢u)",
        "Security Expert (B·∫£o m·∫≠t)",
        "Style Checker (Code format)"
    ])
    run_btn = st.button("üöÄ Start Review", use_container_width=True)
    clear_btn = st.button("üßπ Clear Chat", use_container_width=True)
    generate_tests_btn = st.button("üß™ Generate Test Cases", use_container_width=True)

# =========================
# TAB VIEW
# =========================   
tab1, tab2 = st.tabs(["üí¨ Chat", "üß™ Test Cases"])

with tab1:
    # ph·∫ßn hi·ªÉn th·ªã chat (ƒëo·∫°n b·∫°n ƒë√£ c√≥)
    for msg in st.session_state.chat_history:
        avatar = "üßë‚Äçüíª" if msg["role"] == "user" else "ü§ñ"
        with st.chat_message(msg["role"], avatar=avatar):
            st.markdown(msg["content"])

with tab2:
    st.markdown("### üß™ L·ªãch s·ª≠ Test Case ƒë∆∞·ª£c sinh ra")
    if not st.session_state.test_cases:
        st.info("Ch∆∞a c√≥ test case n√†o. H√£y t·∫°o b·∫±ng n√∫t **Generate Test Cases** trong sidebar.")
    else:
        for i, tc in enumerate(st.session_state.test_cases, 1):
            with st.expander(f"Test Case #{i}: {tc.get('description', '')[:60]}"):
                st.json(tc)

        # N√∫t t·∫£i v·ªÅ
        test_json = json.dumps(st.session_state.test_cases, ensure_ascii=False, indent=2)
        st.download_button(
            label="üíæ T·∫£i test case (.json)",
            data=test_json,
            file_name="test_cases.json",
            mime="application/json"
        )

# =========================
# HELPER FUNCS
# =========================

def run_command(cmd, cwd=None, timeout=20):
    """Ch·∫°y l·ªánh shell (v√≠ d·ª•: flake8) v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
    try:
        r = subprocess.run(cmd, cwd=cwd, shell=True, capture_output=True, text=True, timeout=timeout)
        return r.returncode, r.stdout.strip(), r.stderr.strip()
    except Exception as e:
        return 1, "", str(e)

def safe_read_text(path: Path):
    """ƒê·ªçc file text an to√†n, b·ªè qua l·ªói encoding"""
    return path.read_text(encoding="utf-8", errors="ignore")

def summarize_with_llm(messages):
    """G·ª≠i y√™u c·∫ßu t·ªõi Azure OpenAI ƒë·ªÉ t√≥m t·∫Øt / review code"""
    resp = client.chat.completions.create(
        model=MODEL,
        messages=messages,
        max_tokens=800,
        temperature=0.0,
    )
    return resp.choices[0].message.content.strip()

def extract_text_from_image(img_file):
    """OCR: Tr√≠ch xu·∫•t text t·ª´ ·∫£nh b·∫±ng pytesseract"""
    img = Image.open(img_file)
    return pytesseract.image_to_string(img, lang="eng")

# =========================
# CLEAR CHAT
# =========================
if clear_btn:
    st.session_state.chat_history.clear()
    st.session_state.review_results.clear()
    st.rerun()

# =========================
# X·ª¨ L√ù FILE UPLOAD & REVIEW
# =========================
if run_btn and upload:
    with st.spinner("üîç ƒêang x·ª≠ l√Ω file..."):
        tmp = Path(tempfile.mkdtemp(prefix="ai-review-"))
        files_to_review = []
        extracted_texts = []

        # N·∫øu l√† ·∫£nh: d√πng OCR ƒë·ªÉ ƒë·ªçc n·ªôi dung text
        if upload.type.startswith("image/"):
            text = extract_text_from_image(upload)
            extracted_texts.append({"filename": upload.name, "content": text})
            st.success("‚úÖ ƒê√£ nh·∫≠n di·ªán text t·ª´ ·∫£nh!")

        else:
            # L∆∞u file t·∫°m
            save_path = tmp / upload.name
            with open(save_path, "wb") as f:
                f.write(upload.getbuffer())

            # N·∫øu l√† ZIP: gi·∫£i n√©n t·∫•t c·∫£ file code b√™n trong
            if upload.name.endswith(".zip"):
                with zipfile.ZipFile(save_path, "r") as z:
                    z.extractall(tmp)
                for p in tmp.rglob("*"):
                    if p.suffix in {".py", ".js", ".ts", ".java"}:
                        files_to_review.append(p)
            else:
                files_to_review.append(save_path)

        results = []
        for f in files_to_review or extracted_texts:
            if isinstance(f, dict):  # tr∆∞·ªùng h·ª£p ·∫£nh
                fname = f["filename"]
                content = f["content"]
                linter_out = "(Kh√¥ng √°p d·ª•ng cho ·∫£nh)"
            else:
                fname = f.name
                content = safe_read_text(f)
                linter_out = ""

                # N·∫øu l√† Python => ch·∫°y linter flake8
                if f.suffix == ".py":
                    _, out, err = run_command(f"flake8 {f}", cwd=tmp)
                    linter_out = (out + "\n" + err).strip() or "(No issues found)"

            # G·ª≠i n·ªôi dung cho AI ƒë·ªÉ review
            prompt = f"""
You are an expert code reviewer.
File name: {fname}
Linter output: {linter_out}

Code content (first 3000 chars):
{content[:3000]}

Please return JSON with keys: summary, issues[].
"""
            response = summarize_with_llm([
                {"role": "system", "content": "You are a senior software engineer reviewing code for quality and security."},
                {"role": "user", "content": prompt}
            ])

            # Parse k·∫øt qu·∫£ JSON
            try:
                parsed = json.loads(response)
            except:
                parsed = {"summary": response}

            results.append({"file": fname, "review": parsed})

        # L∆∞u k·∫øt qu·∫£ review v√†o session
        st.session_state.review_results = results

        # Hi·ªÉn th·ªã th√¥ng b√°o trong khung chat
        # with st.chat_message("assistant", avatar="ü§ñ"):
        #     st.markdown("‚úÖ **Review ho√†n t·∫•t!** B·∫°n c√≥ th·ªÉ h·ªèi t√¥i chi ti·∫øt v·ªÅ l·ªói ho·∫∑c c√°ch s·ª≠a code.")
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": "‚úÖ Review ƒë√£ ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ h·ªèi th√™m chi ti·∫øt ho·∫∑c y√™u c·∫ßu g·ª£i √Ω fix l·ªói nh√©."
        })

# =========================
# CHAT HI·ªÇN TH·ªä
# =========================
for msg in st.session_state.chat_history:
    avatar = "üßë‚Äçüíª" if msg["role"] == "user" else "ü§ñ"
    with st.chat_message(msg["role"], avatar=avatar):
        st.markdown(msg["content"])

# =========================
# CHAT INPUT
# =========================
user_input = st.chat_input("üí¨ H·ªèi AI v·ªÅ code ho·∫∑c y√™u c·∫ßu review th√™m...")

if user_input:
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    with st.chat_message("user", avatar="üßë‚Äçüíª"):
        st.markdown(user_input)

    # L·∫•y ng·ªØ c·∫£nh t·ª´ c√°c k·∫øt qu·∫£ review g·∫ßn ƒë√¢y
    context_text = ""
    if st.session_state.review_results:
        for r in st.session_state.review_results[:3]:
            ctx = json.dumps(r, ensure_ascii=False)[:1500]
            context_text += f"\n{ctx}\n"

    messages = [
        {"role": "system", "content": "You are a friendly AI code reviewer."},
        {"role": "user", "content": f"Previous review context:\n{context_text}\nUser query:\n{user_input}"}
    ]
    answer = summarize_with_llm(messages)
    st.session_state.chat_history.append({"role": "assistant", "content": answer})

    with st.chat_message("assistant", avatar="ü§ñ"):
        st.markdown(answer)

# =========================
# GENERATE TEST CASES
# =========================
if generate_tests_btn:
    if not st.session_state.review_results:
        st.warning("‚ö†Ô∏è H√£y review code tr∆∞·ªõc khi t·∫°o test case nh√©!")
    else:
        with st.spinner("üß™ ƒêang t·∫°o test case..."):
            code_context = ""
            for r in st.session_state.review_results:
                if "file" in r and "review" in r:
                    code_context += f"File: {r['file']}\n{r['review'].get('summary', '')[:1000]}\n"

            prompt = f"""
Generate detailed and practical test cases for the reviewed code below.
Include both **normal** and **edge cases**, and format the result as a JSON list:
[
  {{
    "description": "M√¥ t·∫£ test case",
    "input": "...",
    "expected_output": "..."
  }}
]
Code context:
{code_context}
"""
            result = summarize_with_llm([
                {"role": "system", "content": "You are an expert QA engineer specializing in software test case design."},
                {"role": "user", "content": prompt}
            ])

            try:
                parsed = json.loads(result)
            except:
                parsed = [{"description": "Raw output", "input": "", "expected_output": result}]

            st.session_state.test_cases.extend(parsed)
            st.success("‚úÖ ƒê√£ t·∫°o test case th√†nh c√¥ng!")

            # Ghi v√†o chat
            # with st.chat_message("assistant", avatar="ü§ñ"):
            #     st.markdown("üß™ **ƒê√£ t·∫°o test case m·ªõi!** Xem trong tab Test Cases.")
            st.session_state.chat_history.append({
                "role": "assistant",
                "content": "üß™ ƒê√£ t·∫°o test case! B·∫°n c√≥ th·ªÉ xem trong tab **Test Cases** ho·∫∑c t·∫£i v·ªÅ."
            })
            st.rerun()
# =========================
# AUTO-SCROLL JS
# =========================
st.markdown("""
<script>
    var chatBox = window.parent.document.querySelector('.chat-box');
    if (chatBox) {
        chatBox.scrollTop = chatBox.scrollHeight;
    }
</script>
""", unsafe_allow_html=True)
